// source file path: ./src/common/types/vibe-types_easyjson.go
// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vibe_types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes(in *jlexer.Lexer, out *WsClientAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ack":
			out.Ack = bool(in.Bool())
		case "Reason":
			out.Reason = string(in.String())
		case "ConvId":
			out.ConvId = string(in.String())
		case "MessageId":
			out.MessageId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes(out *jwriter.Writer, in WsClientAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ack\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Ack))
	}
	{
		const prefix string = ",\"Reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"ConvId\":"
		out.RawString(prefix)
		out.String(string(in.ConvId))
	}
	{
		const prefix string = ",\"MessageId\":"
		out.RawString(prefix)
		out.String(string(in.MessageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsClientAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsClientAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsClientAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsClientAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes(l, v)
}
func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes1(in *jlexer.Lexer, out *Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "userId":
			out.UserID = string(in.String())
		case "deviceId":
			out.DeviceID = string(in.String())
		case "deviceType":
			out.DeviceType = string(in.String())
		case "deviceVersion":
			out.DeviceVersion = string(in.String())
		case "triggeredNotifs":
			out.TriggeredNotifs = bool(in.Bool())
		case "repoName":
			out.RepoName = string(in.String())
		case "commitId":
			out.CommitId = string(in.String())
		case "fileName":
			out.FileName = string(in.String())
		case "lineNumber":
			out.LineNumber = int(in.Int())
		case "eventName":
			out.EventName = string(in.String())
		case "env":
			out.Env = string(in.String())
		case "priorityLevel":
			out.PriorityLevel = int(in.Int())
		case "eventData":
			if in.IsNull() {
				in.Skip()
				out.EventData = nil
			} else {
				in.Delim('[')
				if out.EventData == nil {
					if !in.IsDelim(']') {
						out.EventData = make([]interface{}, 0, 4)
					} else {
						out.EventData = []interface{}{}
					}
				} else {
					out.EventData = (out.EventData)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.EventData = append(out.EventData, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorTrace":
			if in.IsNull() {
				in.Skip()
				out.ErrorTrace = nil
			} else {
				in.Delim('[')
				if out.ErrorTrace == nil {
					if !in.IsDelim(']') {
						out.ErrorTrace = make([]interface{}, 0, 4)
					} else {
						out.ErrorTrace = []interface{}{}
					}
				} else {
					out.ErrorTrace = (out.ErrorTrace)[:0]
				}
				for !in.IsDelim(']') {
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					out.ErrorTrace = append(out.ErrorTrace, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "createdBy":
			out.CreatedBy = string(in.String())
		case "updatedBy":
			out.UpdatedBy = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.Tags)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes1(out *jwriter.Writer, in Trace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"deviceId\":"
		out.RawString(prefix)
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"deviceType\":"
		out.RawString(prefix)
		out.String(string(in.DeviceType))
	}
	{
		const prefix string = ",\"deviceVersion\":"
		out.RawString(prefix)
		out.String(string(in.DeviceVersion))
	}
	{
		const prefix string = ",\"triggeredNotifs\":"
		out.RawString(prefix)
		out.Bool(bool(in.TriggeredNotifs))
	}
	{
		const prefix string = ",\"repoName\":"
		out.RawString(prefix)
		out.String(string(in.RepoName))
	}
	{
		const prefix string = ",\"commitId\":"
		out.RawString(prefix)
		out.String(string(in.CommitId))
	}
	{
		const prefix string = ",\"fileName\":"
		out.RawString(prefix)
		out.String(string(in.FileName))
	}
	{
		const prefix string = ",\"lineNumber\":"
		out.RawString(prefix)
		out.Int(int(in.LineNumber))
	}
	{
		const prefix string = ",\"eventName\":"
		out.RawString(prefix)
		out.String(string(in.EventName))
	}
	{
		const prefix string = ",\"env\":"
		out.RawString(prefix)
		out.String(string(in.Env))
	}
	{
		const prefix string = ",\"priorityLevel\":"
		out.RawString(prefix)
		out.Int(int(in.PriorityLevel))
	}
	{
		const prefix string = ",\"eventData\":"
		out.RawString(prefix)
		if in.EventData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.EventData {
				if v4 > 0 {
					out.RawByte(',')
				}
				if m, ok := v5.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorTrace\":"
		out.RawString(prefix)
		if in.ErrorTrace == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.ErrorTrace {
				if v6 > 0 {
					out.RawByte(',')
				}
				if m, ok := v7.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v7.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v7))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"createdBy\":"
		out.RawString(prefix)
		out.String(string(in.CreatedBy))
	}
	{
		const prefix string = ",\"updatedBy\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedBy))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Tags {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes1(l, v)
}
func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes2(in *jlexer.Lexer, out *RedisPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Redis":
			out.Redis = bool(in.Bool())
		case "Meta":
			easyjson7932026cDecode(in, &out.Meta)
		case "Data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes2(out *jwriter.Writer, in RedisPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Redis\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Redis))
	}
	{
		const prefix string = ",\"Meta\":"
		out.RawString(prefix)
		easyjson7932026cEncode(out, in.Meta)
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedisPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedisPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedisPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedisPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes2(l, v)
}
func easyjson7932026cDecode(in *jlexer.Lexer, out *struct {
	IsList      bool
	TimeCreated string
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsList":
			out.IsList = bool(in.Bool())
		case "TimeCreated":
			out.TimeCreated = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncode(out *jwriter.Writer, in struct {
	IsList      bool
	TimeCreated string
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsList\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsList))
	}
	{
		const prefix string = ",\"TimeCreated\":"
		out.RawString(prefix)
		out.String(string(in.TimeCreated))
	}
	out.RawByte('}')
}
func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes3(in *jlexer.Lexer, out *RabbitPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rabbit":
			out.Rabbit = bool(in.Bool())
		case "Topic":
			out.Topic = string(in.String())
		case "TopicType":
			out.TopicType = string(in.String())
		case "Meta":
			if m, ok := out.Meta.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Meta.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Meta = in.Interface()
			}
		case "Data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes3(out *jwriter.Writer, in RabbitPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Rabbit\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Rabbit))
	}
	{
		const prefix string = ",\"Topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"TopicType\":"
		out.RawString(prefix)
		out.String(string(in.TopicType))
	}
	{
		const prefix string = ",\"Meta\":"
		out.RawString(prefix)
		if m, ok := in.Meta.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Meta.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Meta))
		}
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RabbitPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RabbitPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RabbitPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RabbitPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes3(l, v)
}
func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes4(in *jlexer.Lexer, out *LoggedInUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserId":
			out.UserId = string(in.String())
		case "UserObjId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserObjId).UnmarshalJSON(data))
			}
		case "Model":
			if m, ok := out.Model.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Model.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Model = in.Interface()
			}
		case "Roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]interface{}, 0, 4)
					} else {
						out.Roles = []interface{}{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v9 interface{}
					if m, ok := v9.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v9.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v9 = in.Interface()
					}
					out.Roles = append(out.Roles, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "JWTClaims":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.JWTClaims = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 interface{}
					if m, ok := v10.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v10.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v10 = in.Interface()
					}
					(out.JWTClaims)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes4(out *jwriter.Writer, in LoggedInUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"UserObjId\":"
		out.RawString(prefix)
		out.Raw((in.UserObjId).MarshalJSON())
	}
	{
		const prefix string = ",\"Model\":"
		out.RawString(prefix)
		if m, ok := in.Model.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Model.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Model))
		}
	}
	{
		const prefix string = ",\"Roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Roles {
				if v11 > 0 {
					out.RawByte(',')
				}
				if m, ok := v12.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"JWTClaims\":"
		out.RawString(prefix)
		if in.JWTClaims == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.JWTClaims {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if m, ok := v13Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoggedInUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoggedInUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoggedInUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoggedInUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes4(l, v)
}
func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes5(in *jlexer.Lexer, out *KafkaTopicsPollPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TopicIds":
			if in.IsNull() {
				in.Skip()
				out.TopicIds = nil
			} else {
				in.Delim('[')
				if out.TopicIds == nil {
					if !in.IsDelim(']') {
						out.TopicIds = make([]string, 0, 4)
					} else {
						out.TopicIds = []string{}
					}
				} else {
					out.TopicIds = (out.TopicIds)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.TopicIds = append(out.TopicIds, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes5(out *jwriter.Writer, in KafkaTopicsPollPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TopicIds\":"
		out.RawString(prefix[1:])
		if in.TopicIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.TopicIds {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KafkaTopicsPollPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KafkaTopicsPollPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KafkaTopicsPollPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KafkaTopicsPollPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes5(l, v)
}
func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes6(in *jlexer.Lexer, out *KafkaPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Kafka":
			out.Kafka = bool(in.Bool())
		case "Meta":
			easyjson7932026cDecode(in, &out.Meta)
		case "Data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes6(out *jwriter.Writer, in KafkaPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Kafka\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Kafka))
	}
	{
		const prefix string = ",\"Meta\":"
		out.RawString(prefix)
		easyjson7932026cEncode(out, in.Meta)
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KafkaPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KafkaPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KafkaPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KafkaPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes6(l, v)
}
func easyjson7932026cDecodeVibeirlComWssSrcCommonTypes7(in *jlexer.Lexer, out *ErrorResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error_id":
			out.ErrId = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "status_code":
			out.StatusCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7932026cEncodeVibeirlComWssSrcCommonTypes7(out *jwriter.Writer, in ErrorResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ErrId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"status_code\":"
		out.RawString(prefix)
		out.Int(int(in.StatusCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7932026cEncodeVibeirlComWssSrcCommonTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7932026cDecodeVibeirlComWssSrcCommonTypes7(l, v)
}
