// source file path: ./src/common/mongo/types/types_easyjson.go
// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mngo_types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes(in *jlexer.Lexer, out *TracingInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ProcUUID":
			out.ProcUUID = string(in.String())
		case "UserId":
			out.UserId = string(in.String())
		case "Station":
			out.Station = string(in.String())
		case "Time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Time).UnmarshalJSON(data))
				}
			}
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Tags)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes(out *jwriter.Writer, in TracingInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ProcUUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ProcUUID))
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"Station\":"
		out.RawString(prefix)
		out.String(string(in.Station))
	}
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix)
		if in.Time == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Time).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Tags {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TracingInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TracingInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TracingInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TracingInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes1(in *jlexer.Lexer, out *MongoUserTags) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "CtxList":
			if in.IsNull() {
				in.Skip()
				out.CtxList = nil
			} else {
				in.Delim('[')
				if out.CtxList == nil {
					if !in.IsDelim(']') {
						out.CtxList = make([]interface{}, 0, 4)
					} else {
						out.CtxList = []interface{}{}
					}
				} else {
					out.CtxList = (out.CtxList)[:0]
				}
				for !in.IsDelim(']') {
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					out.CtxList = append(out.CtxList, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CtxMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CtxMap = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.CtxMap)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "TagsList":
			if in.IsNull() {
				in.Skip()
				out.TagsList = nil
			} else {
				in.Delim('[')
				if out.TagsList == nil {
					if !in.IsDelim(']') {
						out.TagsList = make([]interface{}, 0, 4)
					} else {
						out.TagsList = []interface{}{}
					}
				} else {
					out.TagsList = (out.TagsList)[:0]
				}
				for !in.IsDelim(']') {
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					out.TagsList = append(out.TagsList, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TagsMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TagsMap = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					(out.TagsMap)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]string, 0, 4)
					} else {
						out.Files = []string{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Files = append(out.Files, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes1(out *jwriter.Writer, in MongoUserTags) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"CtxList\":"
		out.RawString(prefix)
		if in.CtxList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.CtxList {
				if v8 > 0 {
					out.RawByte(',')
				}
				if m, ok := v9.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CtxMap\":"
		out.RawString(prefix)
		if in.CtxMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.CtxMap {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if m, ok := v10Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v10Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v10Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"TagsList\":"
		out.RawString(prefix)
		if in.TagsList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.TagsList {
				if v11 > 0 {
					out.RawByte(',')
				}
				if m, ok := v12.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TagsMap\":"
		out.RawString(prefix)
		if in.TagsMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.TagsMap {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if m, ok := v13Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Files\":"
		out.RawString(prefix)
		if in.Files == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Files {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoUserTags) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoUserTags) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoUserTags) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoUserTags) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes1(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes2(in *jlexer.Lexer, out *MongoUserOnline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "DeviceId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeviceId).UnmarshalJSON(data))
			}
		case "ConnectDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConnectDate).UnmarshalJSON(data))
			}
		case "DisconnectDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DisconnectDate).UnmarshalJSON(data))
			}
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes2(out *jwriter.Writer, in MongoUserOnline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"DeviceId\":"
		out.RawString(prefix)
		out.Raw((in.DeviceId).MarshalJSON())
	}
	{
		const prefix string = ",\"ConnectDate\":"
		out.RawString(prefix)
		out.Raw((in.ConnectDate).MarshalJSON())
	}
	{
		const prefix string = ",\"DisconnectDate\":"
		out.RawString(prefix)
		out.Raw((in.DisconnectDate).MarshalJSON())
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoUserOnline) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoUserOnline) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoUserOnline) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoUserOnline) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes2(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes3(in *jlexer.Lexer, out *MongoUserLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "UserLocationMarker":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Marker).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "Location":
			easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes4(in, &out.Location)
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 interface{}
					if m, ok := v16.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v16.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v16 = in.Interface()
					}
					(out.Tags)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes3(out *jwriter.Writer, in MongoUserLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"UserLocationMarker\":"
		out.RawString(prefix)
		out.Raw((in.Marker).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"Location\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes4(out, in.Location)
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Tags {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				if m, ok := v17Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v17Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v17Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoUserLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoUserLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoUserLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoUserLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes3(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes4(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "Coords":
			if in.IsNull() {
				in.Skip()
				out.Coords = nil
			} else {
				in.Delim('[')
				if out.Coords == nil {
					if !in.IsDelim(']') {
						out.Coords = make([]float64, 0, 8)
					} else {
						out.Coords = []float64{}
					}
				} else {
					out.Coords = (out.Coords)[:0]
				}
				for !in.IsDelim(']') {
					var v18 float64
					v18 = float64(in.Float64())
					out.Coords = append(out.Coords, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes4(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Coords\":"
		out.RawString(prefix)
		if in.Coords == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Coords {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v20))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes5(in *jlexer.Lexer, out *MongoMessageFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "Name":
			out.Name = string(in.String())
		case "Messages":
			out.Message = string(in.String())
		case "Url":
			out.Url = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Order":
			out.Order = int(in.Int())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 interface{}
					if m, ok := v21.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v21.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v21 = in.Interface()
					}
					(out.Tags)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes5(out *jwriter.Writer, in MongoMessageFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Messages\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int(int(in.Order))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Tags {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				if m, ok := v22Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v22Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v22Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoMessageFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoMessageFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoMessageFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoMessageFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes5(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes6(in *jlexer.Lexer, out *MongoMessageAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "Marker":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Marker).UnmarshalJSON(data))
			}
		case "MessageId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MessageId).UnmarshalJSON(data))
			}
		case "ChatId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChatId).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "IsRead":
			out.IsRead = bool(in.Bool())
		case "IsSaved":
			out.IsSaved = bool(in.Bool())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 interface{}
					if m, ok := v23.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v23.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v23 = in.Interface()
					}
					(out.Tags)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes6(out *jwriter.Writer, in MongoMessageAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"Marker\":"
		out.RawString(prefix)
		out.Raw((in.Marker).MarshalJSON())
	}
	{
		const prefix string = ",\"MessageId\":"
		out.RawString(prefix)
		out.Raw((in.MessageId).MarshalJSON())
	}
	{
		const prefix string = ",\"ChatId\":"
		out.RawString(prefix)
		out.Raw((in.ChatId).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"IsRead\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	{
		const prefix string = ",\"IsSaved\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSaved))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Tags {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				if m, ok := v24Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v24Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v24Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoMessageAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoMessageAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoMessageAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoMessageAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes6(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes7(in *jlexer.Lexer, out *MongoChatUserUserRelation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "UserFrom":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserFrom).UnmarshalJSON(data))
			}
		case "UserTo":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserTo).UnmarshalJSON(data))
			}
		case "Action":
			out.Action = string(in.String())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes7(out *jwriter.Writer, in MongoChatUserUserRelation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"UserFrom\":"
		out.RawString(prefix)
		out.Raw((in.UserFrom).MarshalJSON())
	}
	{
		const prefix string = ",\"UserTo\":"
		out.RawString(prefix)
		out.Raw((in.UserTo).MarshalJSON())
	}
	{
		const prefix string = ",\"Action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatUserUserRelation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatUserUserRelation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatUserUserRelation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatUserUserRelation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes7(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes8(in *jlexer.Lexer, out *MongoChatUserDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "SeqNum":
			out.SeqNum = int(in.Int())
		case "DeviceName":
			out.DeviceName = string(in.String())
		case "DeviceId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeviceId).UnmarshalJSON(data))
			}
		case "DeviceType":
			out.DeviceType = string(in.String())
		case "DevicePlatform":
			out.DevicePlatform = string(in.String())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 interface{}
					if m, ok := v25.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v25.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v25 = in.Interface()
					}
					(out.Tags)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes8(out *jwriter.Writer, in MongoChatUserDevice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"SeqNum\":"
		out.RawString(prefix)
		out.Int(int(in.SeqNum))
	}
	{
		const prefix string = ",\"DeviceName\":"
		out.RawString(prefix)
		out.String(string(in.DeviceName))
	}
	{
		const prefix string = ",\"DeviceId\":"
		out.RawString(prefix)
		out.Raw((in.DeviceId).MarshalJSON())
	}
	{
		const prefix string = ",\"DeviceType\":"
		out.RawString(prefix)
		out.String(string(in.DeviceType))
	}
	{
		const prefix string = ",\"DevicePlatform\":"
		out.RawString(prefix)
		out.String(string(in.DevicePlatform))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Tags {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				if m, ok := v26Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v26Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v26Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatUserDevice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatUserDevice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatUserDevice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatUserDevice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes8(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes9(in *jlexer.Lexer, out *MongoChatUserActivityLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "Messages":
			out.Message = string(in.String())
		case "Url":
			out.Url = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Order":
			out.Order = int(in.Int())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 interface{}
					if m, ok := v27.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v27.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v27 = in.Interface()
					}
					(out.Tags)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes9(out *jwriter.Writer, in MongoChatUserActivityLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"Messages\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int(int(in.Order))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Tags {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				if m, ok := v28Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v28Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v28Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatUserActivityLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatUserActivityLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatUserActivityLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatUserActivityLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes9(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes10(in *jlexer.Lexer, out *MongoChatUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "Handle":
			out.Handle = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "BirthMonth":
			out.BirthMonth = int(in.Int())
		case "BirthDay":
			out.BirthDay = int(in.Int())
		case "BirthYear":
			out.BirthYear = int(in.Int())
		case "DefaultTimezone":
			out.DefaultTimezone = int(in.Int())
		case "ChatDeviceSeqValue":
			out.ChatDeviceSeqValue = int(in.Int())
		case "Status":
			out.Status = string(in.String())
		case "Interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Interests = append(out.Interests, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ProfilePictureURL":
			out.ProfilePictureURL = string(in.String())
		case "Bio":
			out.Bio = string(in.String())
		case "City":
			out.City = string(in.String())
		case "Country":
			out.Country = string(in.String())
		case "Notifications":
			out.Notifications = bool(in.Bool())
		case "LastActiveTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastActiveTime).UnmarshalJSON(data))
			}
		case "Language":
			out.Language = string(in.String())
		case "EmailVerified":
			out.EmailVerified = bool(in.Bool())
		case "TwoFactorEnabled":
			out.TwoFactorEnabled = bool(in.Bool())
		case "Theme":
			out.Theme = string(in.String())
		case "FontSize":
			out.FontSize = int(in.Int())
		case "Reputation":
			out.Reputation = int(in.Int())
		case "ShareLocation":
			out.ShareLocation = bool(in.Bool())
		case "DoNotDisturb":
			out.DoNotDisturb = bool(in.Bool())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "TagsMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TagsMap = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v30 interface{}
					if m, ok := v30.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v30.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v30 = in.Interface()
					}
					(out.TagsMap)[key] = v30
					in.WantComma()
				}
				in.Delim('}')
			}
		case "TagsList":
			if in.IsNull() {
				in.Skip()
				out.TagsList = nil
			} else {
				in.Delim('[')
				if out.TagsList == nil {
					if !in.IsDelim(']') {
						out.TagsList = make([]interface{}, 0, 4)
					} else {
						out.TagsList = []interface{}{}
					}
				} else {
					out.TagsList = (out.TagsList)[:0]
				}
				for !in.IsDelim(']') {
					var v31 interface{}
					if m, ok := v31.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v31.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v31 = in.Interface()
					}
					out.TagsList = append(out.TagsList, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes10(out *jwriter.Writer, in MongoChatUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"Handle\":"
		out.RawString(prefix)
		out.String(string(in.Handle))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"BirthMonth\":"
		out.RawString(prefix)
		out.Int(int(in.BirthMonth))
	}
	{
		const prefix string = ",\"BirthDay\":"
		out.RawString(prefix)
		out.Int(int(in.BirthDay))
	}
	{
		const prefix string = ",\"BirthYear\":"
		out.RawString(prefix)
		out.Int(int(in.BirthYear))
	}
	{
		const prefix string = ",\"DefaultTimezone\":"
		out.RawString(prefix)
		out.Int(int(in.DefaultTimezone))
	}
	{
		const prefix string = ",\"ChatDeviceSeqValue\":"
		out.RawString(prefix)
		out.Int(int(in.ChatDeviceSeqValue))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"Interests\":"
		out.RawString(prefix)
		if in.Interests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Interests {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ProfilePictureURL\":"
		out.RawString(prefix)
		out.String(string(in.ProfilePictureURL))
	}
	{
		const prefix string = ",\"Bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"Country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"Notifications\":"
		out.RawString(prefix)
		out.Bool(bool(in.Notifications))
	}
	{
		const prefix string = ",\"LastActiveTime\":"
		out.RawString(prefix)
		out.Raw((in.LastActiveTime).MarshalJSON())
	}
	{
		const prefix string = ",\"Language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"EmailVerified\":"
		out.RawString(prefix)
		out.Bool(bool(in.EmailVerified))
	}
	{
		const prefix string = ",\"TwoFactorEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.TwoFactorEnabled))
	}
	{
		const prefix string = ",\"Theme\":"
		out.RawString(prefix)
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"FontSize\":"
		out.RawString(prefix)
		out.Int(int(in.FontSize))
	}
	{
		const prefix string = ",\"Reputation\":"
		out.RawString(prefix)
		out.Int(int(in.Reputation))
	}
	{
		const prefix string = ",\"ShareLocation\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShareLocation))
	}
	{
		const prefix string = ",\"DoNotDisturb\":"
		out.RawString(prefix)
		out.Bool(bool(in.DoNotDisturb))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"TagsMap\":"
		out.RawString(prefix)
		if in.TagsMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.TagsMap {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v34Name))
				out.RawByte(':')
				if m, ok := v34Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v34Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v34Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"TagsList\":"
		out.RawString(prefix)
		if in.TagsList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.TagsList {
				if v35 > 0 {
					out.RawByte(',')
				}
				if m, ok := v36.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v36.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v36))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes10(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes11(in *jlexer.Lexer, out *MongoChatMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "Marker":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Marker).UnmarshalJSON(data))
			}
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedByUserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedByUserId).UnmarshalJSON(data))
			}
		case "ChatId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChatId).UnmarshalJSON(data))
			}
		case "PriorityUserIds":
			if in.IsNull() {
				in.Skip()
				out.PriorityUserIds = nil
			} else {
				in.Delim('[')
				if out.PriorityUserIds == nil {
					if !in.IsDelim(']') {
						out.PriorityUserIds = make([]primitive.ObjectID, 0, 5)
					} else {
						out.PriorityUserIds = []primitive.ObjectID{}
					}
				} else {
					out.PriorityUserIds = (out.PriorityUserIds)[:0]
				}
				for !in.IsDelim(']') {
					var v37 primitive.ObjectID
					if data := in.Raw(); in.Ok() {
						in.AddError((v37).UnmarshalJSON(data))
					}
					out.PriorityUserIds = append(out.PriorityUserIds, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PreviousMessageIds":
			if in.IsNull() {
				in.Skip()
				out.PreviousMessageIds = nil
			} else {
				in.Delim('[')
				if out.PreviousMessageIds == nil {
					if !in.IsDelim(']') {
						out.PreviousMessageIds = make([]primitive.ObjectID, 0, 5)
					} else {
						out.PreviousMessageIds = []primitive.ObjectID{}
					}
				} else {
					out.PreviousMessageIds = (out.PreviousMessageIds)[:0]
				}
				for !in.IsDelim(']') {
					var v38 primitive.ObjectID
					if data := in.Raw(); in.Ok() {
						in.AddError((v38).UnmarshalJSON(data))
					}
					out.PreviousMessageIds = append(out.PreviousMessageIds, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IsGroupChat":
			out.IsGroupChat = bool(in.Bool())
		case "IsPublicChatRoom":
			out.IsPublicChatRoom = bool(in.Bool())
		case "UserCount":
			out.UserCount = int(in.Int())
		case "Messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]string, 0, 4)
					} else {
						out.Messages = []string{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Messages = append(out.Messages, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TracingInfo":
			if in.IsNull() {
				in.Skip()
				out.TracingInfo = nil
			} else {
				in.Delim('[')
				if out.TracingInfo == nil {
					if !in.IsDelim(']') {
						out.TracingInfo = make([]TracingInfo, 0, 0)
					} else {
						out.TracingInfo = []TracingInfo{}
					}
				} else {
					out.TracingInfo = (out.TracingInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v40 TracingInfo
					(v40).UnmarshalEasyJSON(in)
					out.TracingInfo = append(out.TracingInfo, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ReplayCount":
			out.ReplayCount = int(in.Int())
		case "IsReaction":
			if in.IsNull() {
				in.Skip()
				out.IsReaction = nil
			} else {
				if out.IsReaction == nil {
					out.IsReaction = new(bool)
				}
				*out.IsReaction = bool(in.Bool())
			}
		case "IsDeleted":
			if in.IsNull() {
				in.Skip()
				out.IsDeleted = nil
			} else {
				if out.IsDeleted == nil {
					out.IsDeleted = new(bool)
				}
				*out.IsDeleted = bool(in.Bool())
			}
		case "DisplayFormat":
			if in.IsNull() {
				in.Skip()
				out.DisplayFormat = nil
			} else {
				if out.DisplayFormat == nil {
					out.DisplayFormat = new(string)
				}
				*out.DisplayFormat = string(in.String())
			}
		case "DateCreatedOnDevice":
			if in.IsNull() {
				in.Skip()
				out.DateCreatedOnDevice = nil
			} else {
				if out.DateCreatedOnDevice == nil {
					out.DateCreatedOnDevice = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DateCreatedOnDevice).UnmarshalJSON(data))
				}
			}
		case "DateFirstOnServer":
			if in.IsNull() {
				in.Skip()
				out.DateFirstOnServer = nil
			} else {
				if out.DateFirstOnServer == nil {
					out.DateFirstOnServer = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DateFirstOnServer).UnmarshalJSON(data))
				}
			}
		case "ChildId":
			if in.IsNull() {
				in.Skip()
				out.ChildId = nil
			} else {
				if out.ChildId == nil {
					out.ChildId = new(primitive.ObjectID)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChildId).UnmarshalJSON(data))
				}
			}
		case "ChildType":
			if in.IsNull() {
				in.Skip()
				out.ChildType = nil
			} else {
				if out.ChildType == nil {
					out.ChildType = new(string)
				}
				*out.ChildType = string(in.String())
			}
		case "ParentId":
			if in.IsNull() {
				in.Skip()
				out.ParentId = nil
			} else {
				if out.ParentId == nil {
					out.ParentId = new(primitive.ObjectID)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ParentId).UnmarshalJSON(data))
				}
			}
		case "ParentType":
			if in.IsNull() {
				in.Skip()
				out.ParentType = nil
			} else {
				if out.ParentType == nil {
					out.ParentType = new(string)
				}
				*out.ParentType = string(in.String())
			}
		case "GrandParentId":
			if in.IsNull() {
				in.Skip()
				out.GrandParentId = nil
			} else {
				if out.GrandParentId == nil {
					out.GrandParentId = new(primitive.ObjectID)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GrandParentId).UnmarshalJSON(data))
				}
			}
		case "Files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				if out.Files == nil {
					out.Files = new([]MongoMessageFile)
				}
				if in.IsNull() {
					in.Skip()
					*out.Files = nil
				} else {
					in.Delim('[')
					if *out.Files == nil {
						if !in.IsDelim(']') {
							*out.Files = make([]MongoMessageFile, 0, 0)
						} else {
							*out.Files = []MongoMessageFile{}
						}
					} else {
						*out.Files = (*out.Files)[:0]
					}
					for !in.IsDelim(']') {
						var v41 MongoMessageFile
						(v41).UnmarshalEasyJSON(in)
						*out.Files = append(*out.Files, v41)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "IsDraft":
			if in.IsNull() {
				in.Skip()
				out.IsDraft = nil
			} else {
				if out.IsDraft == nil {
					out.IsDraft = new(bool)
				}
				*out.IsDraft = bool(in.Bool())
			}
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				if out.Tags == nil {
					out.Tags = new(map[string]interface{})
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Tags = make(map[string]interface{})
					} else {
						*out.Tags = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v42 interface{}
						if m, ok := v42.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v42.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v42 = in.Interface()
						}
						(*out.Tags)[key] = v42
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes11(out *jwriter.Writer, in MongoChatMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"Marker\":"
		out.RawString(prefix)
		out.Raw((in.Marker).MarshalJSON())
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedByUserId\":"
		out.RawString(prefix)
		out.Raw((in.CreatedByUserId).MarshalJSON())
	}
	{
		const prefix string = ",\"ChatId\":"
		out.RawString(prefix)
		out.Raw((in.ChatId).MarshalJSON())
	}
	{
		const prefix string = ",\"PriorityUserIds\":"
		out.RawString(prefix)
		if in.PriorityUserIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.PriorityUserIds {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.Raw((v44).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PreviousMessageIds\":"
		out.RawString(prefix)
		if in.PreviousMessageIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.PreviousMessageIds {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.Raw((v46).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IsGroupChat\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsGroupChat))
	}
	{
		const prefix string = ",\"IsPublicChatRoom\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublicChatRoom))
	}
	{
		const prefix string = ",\"UserCount\":"
		out.RawString(prefix)
		out.Int(int(in.UserCount))
	}
	{
		const prefix string = ",\"Messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Messages {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TracingInfo\":"
		out.RawString(prefix)
		if in.TracingInfo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.TracingInfo {
				if v49 > 0 {
					out.RawByte(',')
				}
				(v50).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ReplayCount\":"
		out.RawString(prefix)
		out.Int(int(in.ReplayCount))
	}
	if in.IsReaction != nil {
		const prefix string = ",\"IsReaction\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsReaction))
	}
	if in.IsDeleted != nil {
		const prefix string = ",\"IsDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsDeleted))
	}
	{
		const prefix string = ",\"DisplayFormat\":"
		out.RawString(prefix)
		if in.DisplayFormat == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DisplayFormat))
		}
	}
	{
		const prefix string = ",\"DateCreatedOnDevice\":"
		out.RawString(prefix)
		if in.DateCreatedOnDevice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DateCreatedOnDevice).MarshalJSON())
		}
	}
	if in.DateFirstOnServer != nil {
		const prefix string = ",\"DateFirstOnServer\":"
		out.RawString(prefix)
		out.Raw((*in.DateFirstOnServer).MarshalJSON())
	}
	if in.ChildId != nil {
		const prefix string = ",\"ChildId\":"
		out.RawString(prefix)
		out.Raw((*in.ChildId).MarshalJSON())
	}
	if in.ChildType != nil {
		const prefix string = ",\"ChildType\":"
		out.RawString(prefix)
		out.String(string(*in.ChildType))
	}
	if in.ParentId != nil {
		const prefix string = ",\"ParentId\":"
		out.RawString(prefix)
		out.Raw((*in.ParentId).MarshalJSON())
	}
	if in.ParentType != nil {
		const prefix string = ",\"ParentType\":"
		out.RawString(prefix)
		out.String(string(*in.ParentType))
	}
	if in.GrandParentId != nil {
		const prefix string = ",\"GrandParentId\":"
		out.RawString(prefix)
		out.Raw((*in.GrandParentId).MarshalJSON())
	}
	if in.Files != nil {
		const prefix string = ",\"Files\":"
		out.RawString(prefix)
		if *in.Files == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range *in.Files {
				if v51 > 0 {
					out.RawByte(',')
				}
				(v52).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsDraft != nil {
		const prefix string = ",\"IsDraft\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsDraft))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.Tags != nil {
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if *in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v53First := true
			for v53Name, v53Value := range *in.Tags {
				if v53First {
					v53First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v53Name))
				out.RawByte(':')
				if m, ok := v53Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v53Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v53Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes11(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes12(in *jlexer.Lexer, out *MongoChatMapToUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "Marker":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Marker).UnmarshalJSON(data))
			}
		case "ChatId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChatId).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "InviterId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.InviterId).UnmarshalJSON(data))
			}
		case "DateAdded":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateAdded).UnmarshalJSON(data))
			}
		case "DateRemoved":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateRemoved).UnmarshalJSON(data))
			}
		case "IsRemoved":
			out.IsRemoved = bool(in.Bool())
		case "IsAdmin":
			out.IsAdmin = bool(in.Bool())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 interface{}
					if m, ok := v54.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v54.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v54 = in.Interface()
					}
					(out.Tags)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes12(out *jwriter.Writer, in MongoChatMapToUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"Marker\":"
		out.RawString(prefix)
		out.Raw((in.Marker).MarshalJSON())
	}
	{
		const prefix string = ",\"ChatId\":"
		out.RawString(prefix)
		out.Raw((in.ChatId).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"InviterId\":"
		out.RawString(prefix)
		out.Raw((in.InviterId).MarshalJSON())
	}
	{
		const prefix string = ",\"DateAdded\":"
		out.RawString(prefix)
		out.Raw((in.DateAdded).MarshalJSON())
	}
	{
		const prefix string = ",\"DateRemoved\":"
		out.RawString(prefix)
		out.Raw((in.DateRemoved).MarshalJSON())
	}
	{
		const prefix string = ",\"IsRemoved\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRemoved))
	}
	{
		const prefix string = ",\"IsAdmin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.Tags {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				if m, ok := v55Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v55Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v55Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatMapToUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatMapToUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatMapToUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatMapToUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes12(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes13(in *jlexer.Lexer, out *MongoChatConvUserSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserId).UnmarshalJSON(data))
			}
		case "ConvId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ConvId).UnmarshalJSON(data))
			}
		case "ReadReceipts":
			out.ReadReceipts = bool(in.Bool())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes13(out *jwriter.Writer, in MongoChatConvUserSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.UserId).MarshalJSON())
	}
	{
		const prefix string = ",\"ConvId\":"
		out.RawString(prefix)
		out.Raw((in.ConvId).MarshalJSON())
	}
	{
		const prefix string = ",\"ReadReceipts\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadReceipts))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatConvUserSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatConvUserSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatConvUserSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatConvUserSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes13(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes14(in *jlexer.Lexer, out *MongoChatConvEvents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "Marker":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Marker).UnmarshalJSON(data))
			}
		case "ChatId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChatId).UnmarshalJSON(data))
			}
		case "UserId":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Who).UnmarshalJSON(data))
			}
		case "DidWhat":
			if in.IsNull() {
				in.Skip()
				out.DidWhat = nil
			} else {
				in.Delim('[')
				if out.DidWhat == nil {
					if !in.IsDelim(']') {
						out.DidWhat = make([]string, 0, 4)
					} else {
						out.DidWhat = []string{}
					}
				} else {
					out.DidWhat = (out.DidWhat)[:0]
				}
				for !in.IsDelim(']') {
					var v56 string
					v56 = string(in.String())
					out.DidWhat = append(out.DidWhat, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ToWhom":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ToWhom).UnmarshalJSON(data))
			}
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v57 interface{}
					if m, ok := v57.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v57.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v57 = in.Interface()
					}
					(out.Tags)[key] = v57
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes14(out *jwriter.Writer, in MongoChatConvEvents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"Marker\":"
		out.RawString(prefix)
		out.Raw((in.Marker).MarshalJSON())
	}
	{
		const prefix string = ",\"ChatId\":"
		out.RawString(prefix)
		out.Raw((in.ChatId).MarshalJSON())
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Raw((in.Who).MarshalJSON())
	}
	{
		const prefix string = ",\"DidWhat\":"
		out.RawString(prefix)
		if in.DidWhat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.DidWhat {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ToWhom\":"
		out.RawString(prefix)
		out.Raw((in.ToWhom).MarshalJSON())
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v60First := true
			for v60Name, v60Value := range in.Tags {
				if v60First {
					v60First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v60Name))
				out.RawByte(':')
				if m, ok := v60Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v60Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v60Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatConvEvents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatConvEvents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatConvEvents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatConvEvents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes14(l, v)
}
func easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes15(in *jlexer.Lexer, out *MongoChatConv) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Id).UnmarshalJSON(data))
			}
		case "Marker":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Marker).UnmarshalJSON(data))
			}
		case "SeqNum":
			out.SeqNum = int64(in.Int64())
		case "ChatTitle":
			out.ChatTitle = string(in.String())
		case "MessageCount":
			out.MessageCount = int(in.Int())
		case "PrivateKey":
			out.PrivateKey = string(in.String())
		case "SoftDelete":
			out.SoftDelete = bool(in.Bool())
		case "CreatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalJSON(data))
			}
		case "UpdatedBy":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v61 interface{}
					if m, ok := v61.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v61.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v61 = in.Interface()
					}
					(out.Tags)[key] = v61
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes15(out *jwriter.Writer, in MongoChatConv) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.Id).MarshalJSON())
	}
	{
		const prefix string = ",\"Marker\":"
		out.RawString(prefix)
		out.Raw((in.Marker).MarshalJSON())
	}
	{
		const prefix string = ",\"SeqNum\":"
		out.RawString(prefix)
		out.Int64(int64(in.SeqNum))
	}
	{
		const prefix string = ",\"ChatTitle\":"
		out.RawString(prefix)
		out.String(string(in.ChatTitle))
	}
	{
		const prefix string = ",\"MessageCount\":"
		out.RawString(prefix)
		out.Int(int(in.MessageCount))
	}
	{
		const prefix string = ",\"PrivateKey\":"
		out.RawString(prefix)
		out.String(string(in.PrivateKey))
	}
	{
		const prefix string = ",\"SoftDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.SoftDelete))
	}
	{
		const prefix string = ",\"CreatedBy\":"
		out.RawString(prefix)
		out.Raw((in.CreatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedBy\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedBy).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v62First := true
			for v62Name, v62Value := range in.Tags {
				if v62First {
					v62First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v62Name))
				out.RawByte(':')
				if m, ok := v62Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v62Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v62Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MongoChatConv) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MongoChatConv) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeVibeirlComWssSrcCommonMongoTypes15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MongoChatConv) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MongoChatConv) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeVibeirlComWssSrcCommonMongoTypes15(l, v)
}
